{ pkgs ? import <nixpkgs> {} }:

let
  inherit (pkgs) lib;
  sources = pkgs.callPackage ./sources.nix {};

  getHash = path: import (pkgs.runCommand "gethash.nix" {
    inherit path;
    nativeBuildInputs = with pkgs; [ nix ];
  } ''
    sha256="$(nix-hash --flat --base32 --type sha256 "$path")"
    echo "\"$sha256\"" > "$out"
  '');

  deps = let
    file = pkgs.runCommand "urls" {
      IDF_PATH = sources.esp-idf.src;
      nativeBuildInputs = [ pkgs.python2 ];
    } ''
      python2 ${./fetch_deps.py} > $out
    '';
    url-list = lib.filter (x: x != "")
      (lib.splitString "\n" (builtins.readFile file));
      mkEntry = url: let
        f1 = s: builtins.baseNameOf s;
        f2 = s: lib.removeSuffix ".tar.gz" s;
        f3 = s: lib.replaceStrings [ "." ] [ "_" ] s;
      in lib.nameValuePair
        # Dependency name
        (lib.pipe url [ f1 f2 f3 ])
        # Dependency object
        ({
          inherit url;
          sha256 = getHash (builtins.fetchurl url);
        });
  in lib.listToAttrs (map mkEntry url-list);

  dumpAttrs = indent: attrs: let
    mkVal = val: if lib.isAttrs val then dumpAttrs (indent + 1) val
                  else "\"${lib.escape ["$" "\\" "\""] (toString val)}\"";
    mkIndent = level: lib.concatStrings (builtins.genList (_: "  ") level);
    mkAttr = key: val: "${mkIndent (indent + 1)}${key} = ${mkVal val};\n";
    attrLines = lib.mapAttrsToList mkAttr attrs;
  in "{\n" + (lib.concatStrings attrLines) + (mkIndent indent) + "}";
in pkgs.writeText "new-deps.nix" ''
  # This file is autogenerated from update_deps.sh.
  ${dumpAttrs 0 deps}
''
